
timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6e  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bc  00000000  00000000  0000150f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017d  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8e:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
}

/*--------------------------------------------------------------------*/
/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num){
	*reg_name = *reg_name ^ (1<<pin_num);
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_config_input_pullup>:
  ae:	fc 01       	movw	r30, r24
  b0:	80 81       	ld	r24, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_config_input_pullup+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_config_input_pullup+0xa>
  c0:	92 2f       	mov	r25, r18
  c2:	90 95       	com	r25
  c4:	89 23       	and	r24, r25
  c6:	80 83       	st	Z, r24
  c8:	80 81       	ld	r24, Z
  ca:	81 81       	ldd	r24, Z+1	; 0x01
  cc:	28 2b       	or	r18, r24
  ce:	21 83       	std	Z+1, r18	; 0x01
  d0:	08 95       	ret

000000d2 <GPIO_write_low>:
  d2:	fc 01       	movw	r30, r24
  d4:	90 81       	ld	r25, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_write_low+0xe>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_write_low+0xa>
  e4:	20 95       	com	r18
  e6:	29 23       	and	r18, r25
  e8:	20 83       	st	Z, r18
  ea:	08 95       	ret

000000ec <GPIO_write_high>:
  ec:	fc 01       	movw	r30, r24
  ee:	40 81       	ld	r20, Z
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <GPIO_write_high+0xe>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <GPIO_write_high+0xa>
  fe:	24 2b       	or	r18, r20
 100:	20 83       	st	Z, r18
 102:	08 95       	ret

00000104 <GPIO_read>:

/*--------------------------------------------------------------------*/
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num){
	uint8_t input;
	if(bit_is_set(*reg_name,pin_num)){
 104:	fc 01       	movw	r30, r24
 106:	80 81       	ld	r24, Z
		input=1;
	}
	else{
		input=0;
	}
	return(input);	
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <GPIO_read+0xc>
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <GPIO_read+0x8>
 114:	81 70       	andi	r24, 0x01	; 1
 116:	08 95       	ret

00000118 <main>:
 */
uint8_t cnt=1;//We use a global variable so that we can know the LED on in the interrupt routine
int main(void)
{
    /* Configuration of LEDs */
    GPIO_config_output(&DDRB, LED_D1);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 76 00 	call	0xec	; 0xec <GPIO_write_high>
	
	GPIO_config_output(&DDRB, LED_D2);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D2);
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	85 e2       	ldi	r24, 0x25	; 37
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_low>
	
	GPIO_config_output(&DDRB, LED_D3);
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	84 e2       	ldi	r24, 0x24	; 36
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D3);
 14a:	63 e0       	ldi	r22, 0x03	; 3
 14c:	85 e2       	ldi	r24, 0x25	; 37
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_low>
	
	GPIO_config_output(&DDRB, LED_D4);
 154:	64 e0       	ldi	r22, 0x04	; 4
 156:	84 e2       	ldi	r24, 0x24	; 36
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D4);
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_low>
	
	GPIO_config_output(&DDRB, LED_D5);
 168:	65 e0       	ldi	r22, 0x05	; 5
 16a:	84 e2       	ldi	r24, 0x24	; 36
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D5);
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_low>
	
	/*Configuration of button*/
	GPIO_config_input_pullup(&DDRD,BTN);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	8a e2       	ldi	r24, 0x2A	; 42
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 57 00 	call	0xae	; 0xae <GPIO_config_input_pullup>
	
    

    /* Configuration of 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
    TIM1_overflow_1s();
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8c 7f       	andi	r24, 0xFC	; 252
 18e:	80 83       	st	Z, r24
 190:	80 81       	ld	r24, Z
 192:	84 60       	ori	r24, 0x04	; 4
 194:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 196:	ef e6       	ldi	r30, 0x6F	; 111
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 1a0:	78 94       	sei
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <main+0x8a>

000001a4 <__vector_13>:

/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter1 overflows.
 * Multi-function shield. */
ISR(TIMER1_OVF_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	if(cnt==5){
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ca:	85 30       	cpi	r24, 0x05	; 5
 1cc:	29 f4       	brne	.+10     	; 0x1d8 <__vector_13+0x34>
		PORTB=2;//Turn on the first LED
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	85 b9       	out	0x05, r24	; 5
		cnt=0;
 1d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <__vector_13+0x44>
	}
	else{
		PORTB=PORTB<<1;
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	88 0f       	add	r24, r24
 1dc:	85 b9       	out	0x05, r24	; 5
		cnt++;
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	if(GPIO_read(&PIND,BTN)==0){
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	89 e2       	ldi	r24, 0x29	; 41
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 82 00 	call	0x104	; 0x104 <GPIO_read>
 1f2:	81 11       	cpse	r24, r1
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <__vector_13+0x64>
		TIM1_overflow_262ms();
 1f6:	e1 e8       	ldi	r30, 0x81	; 129
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8b 7f       	andi	r24, 0xFB	; 251
 1fe:	80 83       	st	Z, r24
 200:	80 81       	ld	r24, Z
 202:	83 60       	ori	r24, 0x03	; 3
 204:	80 83       	st	Z, r24
 206:	08 c0       	rjmp	.+16     	; 0x218 <__vector_13+0x74>
	}
	else{
		TIM1_overflow_1s();
 208:	e1 e8       	ldi	r30, 0x81	; 129
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	8c 7f       	andi	r24, 0xFC	; 252
 210:	80 83       	st	Z, r24
 212:	80 81       	ld	r24, Z
 214:	84 60       	ori	r24, 0x04	; 4
 216:	80 83       	st	Z, r24
	}
   
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
