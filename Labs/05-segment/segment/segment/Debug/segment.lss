
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800118  00800118  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea7  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b0  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000657  00000000  00000000  00001c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000022d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000524  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000461  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num){
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
uint8_t tens_1=0;

int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 23 01 	call	0x246	; 0x246 <SEG_init>
	SEG_update_shift_regs(0,0,0);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 33 01 	call	0x266	; 0x266 <SEG_update_shift_regs>
	
    /* Configure 16-bit Timer/Counter1 and 8-bit Timer/Counter0
     * Set pre-scaler and enable overflow interrupt */
	TIM1_overflow_1s();
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8c 7f       	andi	r24, 0xFC	; 252
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 10e:	ef e6       	ldi	r30, 0x6F	; 111
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
	TIM0_overflow_4ms();
 118:	85 b5       	in	r24, 0x25	; 37
 11a:	8c 7f       	andi	r24, 0xFC	; 252
 11c:	85 bd       	out	0x25, r24	; 37
 11e:	85 b5       	in	r24, 0x25	; 37
 120:	84 60       	ori	r24, 0x04	; 4
 122:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 124:	ee e6       	ldi	r30, 0x6E	; 110
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
	sei();
 12e:	78 94       	sei
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x40>

00000132 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
	units_0++;
 13e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <units_0>
 142:	8f 5f       	subi	r24, 0xFF	; 255
	if(units_0>9)
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	18 f4       	brcc	.+6      	; 0x14e <__vector_13+0x1c>
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
	units_0++;
 148:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <units_0>
 14c:	07 c0       	rjmp	.+14     	; 0x15c <__vector_13+0x2a>
	if(units_0>9)
	{
		units_0=0;
 14e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <units_0>
		tens_0++;
 152:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <tens_0>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <tens_0>
	}
	if(tens_0>5)
 15c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <tens_0>
 160:	86 30       	cpi	r24, 0x06	; 6
 162:	48 f0       	brcs	.+18     	; 0x176 <__vector_13+0x44>
	{
		units_1++;
 164:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <units_1>
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <units_1>
		units_0=0;
 16e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <units_0>
		tens_0=0;
 172:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <tens_0>
	}
	if(units_1>9)
 176:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <units_1>
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	38 f0       	brcs	.+14     	; 0x18c <__vector_13+0x5a>
	{
		tens_1++;
 17e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <tens_1>
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <tens_1>
		units_1=0;
 188:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <units_1>
	}
	if(tens_1>5)
 18c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <tens_1>
 190:	86 30       	cpi	r24, 0x06	; 6
 192:	40 f0       	brcs	.+16     	; 0x1a4 <__vector_13+0x72>
	{
		tens_1=0;
 194:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <tens_1>
		units_1=0;
 198:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <units_1>
		units_0=0;
 19c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <units_0>
		tens_0=0;
 1a0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <tens_0>
	}
}
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	static uint8_t pos=0;
	if(pos==0){
 1d2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 1d6:	61 11       	cpse	r22, r1
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <__vector_16+0x36>
		SEG_update_shift_regs(units_0,pos,0);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <units_0>
 1e0:	0e 94 33 01 	call	0x266	; 0x266 <SEG_update_shift_regs>
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <__vector_16+0x60>
		
	}
	else if(pos==1)
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <__vector_16+0x46>
	{
		SEG_update_shift_regs(tens_0,pos,0);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <tens_0>
 1f0:	0e 94 33 01 	call	0x266	; 0x266 <SEG_update_shift_regs>
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <__vector_16+0x60>
		
	}
	else if(pos==2)
 1f6:	62 30       	cpi	r22, 0x02	; 2
 1f8:	31 f4       	brne	.+12     	; 0x206 <__vector_16+0x56>
	{
		SEG_update_shift_regs(units_1,pos,1);
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <units_1>
 200:	0e 94 33 01 	call	0x266	; 0x266 <SEG_update_shift_regs>
 204:	05 c0       	rjmp	.+10     	; 0x210 <__vector_16+0x60>
	}
	else
	{
		SEG_update_shift_regs(tens_1,pos,0);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <tens_1>
 20c:	0e 94 33 01 	call	0x266	; 0x266 <SEG_update_shift_regs>
	}
	pos++;
 210:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 214:	8f 5f       	subi	r24, 0xFF	; 255
	if(pos==4) pos=0;
 216:	84 30       	cpi	r24, 0x04	; 4
 218:	19 f0       	breq	.+6      	; 0x220 <__vector_16+0x70>
	}
	else
	{
		SEG_update_shift_regs(tens_1,pos,0);
	}
	pos++;
 21a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <__vector_16+0x74>
	if(pos==4) pos=0;
 220:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
	/* Configuration of SSD signals */
	GPIO_config_output(&DDRD, SEGMENT_LATCH);
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	8a e2       	ldi	r24, 0x2A	; 42
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD, SEGMENT_CLK);
 250:	67 e0       	ldi	r22, 0x07	; 7
 252:	8a e2       	ldi	r24, 0x2A	; 42
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, SEGMENT_DATA);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	84 e2       	ldi	r24, 0x24	; 36
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 264:	08 95       	ret

00000266 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position, uint8_t dp)
{
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
	uint8_t bit_number;
	if(dp==0){
 26c:	41 11       	cpse	r20, r1
 26e:	06 c0       	rjmp	.+12     	; 0x27c <SEG_update_shift_regs+0x16>
		segments = segment_value[segments];
 270:	e8 2f       	mov	r30, r24
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	e2 5f       	subi	r30, 0xF2	; 242
 276:	fe 4f       	sbci	r31, 0xFE	; 254
 278:	10 81       	ld	r17, Z
 27a:	05 c0       	rjmp	.+10     	; 0x286 <SEG_update_shift_regs+0x20>
	}
	else{
		segments = segment_value_dp[segments];
 27c:	e8 2f       	mov	r30, r24
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ec 5f       	subi	r30, 0xFC	; 252
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	10 81       	ld	r17, Z
	}
	    
	position = segment_position[position];
 286:	e6 2f       	mov	r30, r22
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	e0 50       	subi	r30, 0x00	; 0
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	d0 81       	ld	r29, Z
	// Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD,SEGMENT_LATCH);
 290:	64 e0       	ldi	r22, 0x04	; 4
 292:	8b e2       	ldi	r24, 0x2B	; 43
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 29a:	67 e0       	ldi	r22, 0x07	; 7
 29c:	8b e2       	ldi	r24, 0x2B	; 43
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB,SEGMENT_DATA);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	85 e2       	ldi	r24, 0x25	; 37
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	85 e0       	ldi	r24, 0x05	; 5
 2b0:	8a 95       	dec	r24
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <SEG_update_shift_regs+0x4a>
 2b4:	00 00       	nop
 2b6:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if((segments % 2)==1){
 2b8:	10 ff       	sbrs	r17, 0
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <SEG_update_shift_regs+0x62>
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	85 e2       	ldi	r24, 0x25	; 37
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <SEG_update_shift_regs+0x6c>
		}
		else{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2d2:	95 e0       	ldi	r25, 0x05	; 5
 2d4:	9a 95       	dec	r25
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <SEG_update_shift_regs+0x6e>
 2d8:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);

		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 2da:	67 e0       	ldi	r22, 0x07	; 7
 2dc:	8b e2       	ldi	r24, 0x2B	; 43
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <SEG_update_shift_regs+0x80>
 2ea:	00 00       	nop

		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 2ec:	67 e0       	ldi	r22, 0x07	; 7
 2ee:	8b e2       	ldi	r24, 0x2B	; 43
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "segments"
		segments = segments >> 1;
 2f6:	16 95       	lsr	r17
 2f8:	c1 50       	subi	r28, 0x01	; 1
	// Wait 1 us
	_delay_us(1);

	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 2fa:	f1 f6       	brne	.-68     	; 0x2b8 <SEG_update_shift_regs+0x52>
 2fc:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "position")
		if((position % 2)==1){
 2fe:	d0 ff       	sbrs	r29, 0
 300:	06 c0       	rjmp	.+12     	; 0x30e <SEG_update_shift_regs+0xa8>
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	85 e2       	ldi	r24, 0x25	; 37
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 30c:	05 c0       	rjmp	.+10     	; 0x318 <SEG_update_shift_regs+0xb2>
		}
		else{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	85 e2       	ldi	r24, 0x25	; 37
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 318:	95 e0       	ldi	r25, 0x05	; 5
 31a:	9a 95       	dec	r25
 31c:	f1 f7       	brne	.-4      	; 0x31a <SEG_update_shift_regs+0xb4>
 31e:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 320:	67 e0       	ldi	r22, 0x07	; 7
 322:	8b e2       	ldi	r24, 0x2B	; 43
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 32a:	85 e0       	ldi	r24, 0x05	; 5
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <SEG_update_shift_regs+0xc6>
 330:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 332:	67 e0       	ldi	r22, 0x07	; 7
 334:	8b e2       	ldi	r24, 0x2B	; 43
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "position"
		position = position >> 1;
 33c:	d6 95       	lsr	r29
 33e:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
	}

	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 340:	f1 f6       	brne	.-68     	; 0x2fe <SEG_update_shift_regs+0x98>
		// Shift "position"
		position = position >> 1;
	}

	// Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 342:	64 e0       	ldi	r22, 0x04	; 4
 344:	8b e2       	ldi	r24, 0x2B	; 43
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	8f e9       	ldi	r24, 0x9F	; 159
 34e:	9f e0       	ldi	r25, 0x0F	; 15
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <SEG_update_shift_regs+0xea>
 354:	00 c0       	rjmp	.+0      	; 0x356 <SEG_update_shift_regs+0xf0>
 356:	00 00       	nop

	// Wait 1 us
	_delay_ms(1);
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
