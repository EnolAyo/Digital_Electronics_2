
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800120  00800120  0000044c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114c  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000889  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b9  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000696  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000032fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num){
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 */

int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 c8 00 	call	0x190	; 0x190 <SEG_init>
	SEG_update_shift_regs(0,0,0);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SEG_update_shift_regs>
	
    /* Configure 16-bit Timer/Counter1 and 8-bit Timer/Counter0
     * Set pre-scaler and enable overflow interrupt */
	TIM1_overflow_262ms();
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 10e:	ef e6       	ldi	r30, 0x6F	; 111
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
	sei();
 118:	78 94       	sei
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x2a>

0000011c <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	static uint8_t snake=0;
	static uint8_t pos=0;
	if(snake<=3){
 13e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <snake.1746>
 142:	84 30       	cpi	r24, 0x04	; 4
 144:	18 f4       	brcc	.+6      	; 0x14c <__vector_13+0x30>
		pos=0;
 146:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 14a:	03 c0       	rjmp	.+6      	; 0x152 <__vector_13+0x36>
	}
	else
	{
		pos=1;
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
	}
	SEG_snake(snake,pos);
 152:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
 156:	0e 94 55 01 	call	0x2aa	; 0x2aa <SEG_snake>
	if(snake>=7){
 15a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <snake.1746>
 15e:	87 30       	cpi	r24, 0x07	; 7
 160:	18 f0       	brcs	.+6      	; 0x168 <__vector_13+0x4c>
		snake=0;
 162:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <snake.1746>
 166:	03 c0       	rjmp	.+6      	; 0x16e <__vector_13+0x52>
	}
	else{
		snake++;
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <snake.1746>
	}
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
	/* Configuration of SSD signals */
	GPIO_config_output(&DDRD, SEGMENT_LATCH);
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	8a e2       	ldi	r24, 0x2A	; 42
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD, SEGMENT_CLK);
 19a:	67 e0       	ldi	r22, 0x07	; 7
 19c:	8a e2       	ldi	r24, 0x2A	; 42
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, SEGMENT_DATA);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	84 e2       	ldi	r24, 0x24	; 36
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1ae:	08 95       	ret

000001b0 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position, uint8_t dp)
{
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
	uint8_t bit_number;
	if(dp==0){
 1b6:	41 11       	cpse	r20, r1
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <SEG_update_shift_regs+0x16>
		segments = segment_value[segments];
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ea 5e       	subi	r30, 0xEA	; 234
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	10 81       	ld	r17, Z
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <SEG_update_shift_regs+0x20>
	}
	else{
		segments = segment_value_dp[segments];
 1c6:	e8 2f       	mov	r30, r24
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e4 5f       	subi	r30, 0xF4	; 244
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	10 81       	ld	r17, Z
	}
	    
	position = segment_position[position];
 1d0:	e6 2f       	mov	r30, r22
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e8 5f       	subi	r30, 0xF8	; 248
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	d0 81       	ld	r29, Z
	// Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD,SEGMENT_LATCH);
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	8b e2       	ldi	r24, 0x2B	; 43
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 1e4:	67 e0       	ldi	r22, 0x07	; 7
 1e6:	8b e2       	ldi	r24, 0x2B	; 43
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB,SEGMENT_DATA);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <SEG_update_shift_regs+0x4a>
 1fe:	00 00       	nop
 200:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if((segments % 2)==1){
 202:	10 ff       	sbrs	r17, 0
 204:	06 c0       	rjmp	.+12     	; 0x212 <SEG_update_shift_regs+0x62>
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	85 e2       	ldi	r24, 0x25	; 37
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 210:	05 c0       	rjmp	.+10     	; 0x21c <SEG_update_shift_regs+0x6c>
		}
		else{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	85 e2       	ldi	r24, 0x25	; 37
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 21c:	95 e0       	ldi	r25, 0x05	; 5
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <SEG_update_shift_regs+0x6e>
 222:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);

		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 224:	67 e0       	ldi	r22, 0x07	; 7
 226:	8b e2       	ldi	r24, 0x2B	; 43
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <SEG_update_shift_regs+0x80>
 234:	00 00       	nop

		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 236:	67 e0       	ldi	r22, 0x07	; 7
 238:	8b e2       	ldi	r24, 0x2B	; 43
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "segments"
		segments = segments >> 1;
 240:	16 95       	lsr	r17
 242:	c1 50       	subi	r28, 0x01	; 1
	// Wait 1 us
	_delay_us(1);

	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 244:	f1 f6       	brne	.-68     	; 0x202 <SEG_update_shift_regs+0x52>
 246:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "position")
		if((position % 2)==1){
 248:	d0 ff       	sbrs	r29, 0
 24a:	06 c0       	rjmp	.+12     	; 0x258 <SEG_update_shift_regs+0xa8>
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 256:	05 c0       	rjmp	.+10     	; 0x262 <SEG_update_shift_regs+0xb2>
		}
		else{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	85 e2       	ldi	r24, 0x25	; 37
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 262:	95 e0       	ldi	r25, 0x05	; 5
 264:	9a 95       	dec	r25
 266:	f1 f7       	brne	.-4      	; 0x264 <SEG_update_shift_regs+0xb4>
 268:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 26a:	67 e0       	ldi	r22, 0x07	; 7
 26c:	8b e2       	ldi	r24, 0x2B	; 43
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <SEG_update_shift_regs+0xc6>
 27a:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 27c:	67 e0       	ldi	r22, 0x07	; 7
 27e:	8b e2       	ldi	r24, 0x2B	; 43
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "position"
		position = position >> 1;
 286:	d6 95       	lsr	r29
 288:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
	}

	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 28a:	f1 f6       	brne	.-68     	; 0x248 <SEG_update_shift_regs+0x98>
		// Shift "position"
		position = position >> 1;
	}

	// Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 28c:	64 e0       	ldi	r22, 0x04	; 4
 28e:	8b e2       	ldi	r24, 0x2B	; 43
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	8f e9       	ldi	r24, 0x9F	; 159
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <SEG_update_shift_regs+0xea>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <SEG_update_shift_regs+0xf0>
 2a0:	00 00       	nop

	// Wait 1 us
	_delay_ms(1);
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	08 95       	ret

000002aa <SEG_snake>:

void SEG_snake(uint8_t segments, uint8_t position)
{
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	uint8_t bit_number;
	
	segments = snake_value[segments];
 2b0:	e8 2f       	mov	r30, r24
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	e0 50       	subi	r30, 0x00	; 0
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	10 81       	ld	r17, Z
	position = segment_position[position];
 2ba:	e6 2f       	mov	r30, r22
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e8 5f       	subi	r30, 0xF8	; 248
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	d0 81       	ld	r29, Z
	// Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD,SEGMENT_LATCH);
 2c4:	64 e0       	ldi	r22, 0x04	; 4
 2c6:	8b e2       	ldi	r24, 0x2B	; 43
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 2ce:	67 e0       	ldi	r22, 0x07	; 7
 2d0:	8b e2       	ldi	r24, 0x2B	; 43
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB,SEGMENT_DATA);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	85 e2       	ldi	r24, 0x25	; 37
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	8a 95       	dec	r24
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <SEG_snake+0x3a>
 2e8:	00 00       	nop
 2ea:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if((segments % 2)==1){
 2ec:	10 ff       	sbrs	r17, 0
 2ee:	06 c0       	rjmp	.+12     	; 0x2fc <SEG_snake+0x52>
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	85 e2       	ldi	r24, 0x25	; 37
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <SEG_snake+0x5c>
		}
		else{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	85 e2       	ldi	r24, 0x25	; 37
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 306:	95 e0       	ldi	r25, 0x05	; 5
 308:	9a 95       	dec	r25
 30a:	f1 f7       	brne	.-4      	; 0x308 <SEG_snake+0x5e>
 30c:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);

		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	8b e2       	ldi	r24, 0x2B	; 43
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <SEG_snake+0x70>
 31e:	00 00       	nop

		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 320:	67 e0       	ldi	r22, 0x07	; 7
 322:	8b e2       	ldi	r24, 0x2B	; 43
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "segments"
		segments = segments >> 1;
 32a:	16 95       	lsr	r17
 32c:	c1 50       	subi	r28, 0x01	; 1
	// Wait 1 us
	_delay_us(1);

	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 32e:	f1 f6       	brne	.-68     	; 0x2ec <SEG_snake+0x42>
 330:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "position")
		if((position % 2)==1){
 332:	d0 ff       	sbrs	r29, 0
 334:	06 c0       	rjmp	.+12     	; 0x342 <SEG_snake+0x98>
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	85 e2       	ldi	r24, 0x25	; 37
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 340:	05 c0       	rjmp	.+10     	; 0x34c <SEG_snake+0xa2>
		}
		else{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	85 e2       	ldi	r24, 0x25	; 37
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 34c:	95 e0       	ldi	r25, 0x05	; 5
 34e:	9a 95       	dec	r25
 350:	f1 f7       	brne	.-4      	; 0x34e <SEG_snake+0xa4>
 352:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	8b e2       	ldi	r24, 0x2B	; 43
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 35e:	85 e0       	ldi	r24, 0x05	; 5
 360:	8a 95       	dec	r24
 362:	f1 f7       	brne	.-4      	; 0x360 <SEG_snake+0xb6>
 364:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 366:	67 e0       	ldi	r22, 0x07	; 7
 368:	8b e2       	ldi	r24, 0x2B	; 43
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "position"
		position = position >> 1;
 370:	d6 95       	lsr	r29
 372:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
	}

	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 374:	f1 f6       	brne	.-68     	; 0x332 <SEG_snake+0x88>
		// Shift "position"
		position = position >> 1;
	}

	// Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 376:	64 e0       	ldi	r22, 0x04	; 4
 378:	8b e2       	ldi	r24, 0x2B	; 43
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <SEG_snake+0xda>
 388:	00 c0       	rjmp	.+0      	; 0x38a <SEG_snake+0xe0>
 38a:	00 00       	nop

	// Wait 1 us
	_delay_ms(1);
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
