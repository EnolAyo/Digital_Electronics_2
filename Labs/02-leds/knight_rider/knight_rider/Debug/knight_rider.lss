
knight_rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000796  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d8  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <shift_led>:
#include <util/delay.h>
#include <avr/sfr_defs.h>

void shift_led(){
	
		PORTB=PORTB<<1;
  80:	85 b1       	in	r24, 0x05	; 5
  82:	88 0f       	add	r24, r24
  84:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	89 e6       	ldi	r24, 0x69	; 105
  8a:	98 e1       	ldi	r25, 0x18	; 24
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <shift_led+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <shift_led+0x16>
  96:	00 00       	nop
  98:	08 95       	ret

0000009a <main>:
	
}

int main(void)
{	//LEDS
	DDRB=DDRB|31; //Set five LED ports as output
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	8f 61       	ori	r24, 0x1F	; 31
  9e:	84 b9       	out	0x04, r24	; 4
	PORTB=PORTB & ~(1<<LED_4);// Turn off all the LEDs
  a0:	2c 98       	cbi	0x05, 4	; 5
	//Push button
	DDRD=DDRD & (0<<BTN); //Set pin as input in Data Direction Register
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	1a b8       	out	0x0a, r1	; 10
	PORTD=PORTD|(1<<BTN); //Enable internal pull-up resistor
  a6:	5b 9a       	sbi	0x0b, 3	; 11
	
	while (1) {
		if(bit_is_clear(PIND,BTN)){
			PORTB=1;
  a8:	c1 e0       	ldi	r28, 0x01	; 1
	//Push button
	DDRD=DDRD & (0<<BTN); //Set pin as input in Data Direction Register
	PORTD=PORTD|(1<<BTN); //Enable internal pull-up resistor
	
	while (1) {
		if(bit_is_clear(PIND,BTN)){
  aa:	4b 99       	sbic	0x09, 3	; 9
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x10>
			PORTB=1;
  ae:	c5 b9       	out	0x05, r28	; 5
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x1c>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x26>
  c0:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			for(int i=1;i<=4;i++){
				shift_led();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <shift_led>
  c6:	0e 94 40 00 	call	0x80	; 0x80 <shift_led>
  ca:	0e 94 40 00 	call	0x80	; 0x80 <shift_led>
  ce:	0e 94 40 00 	call	0x80	; 0x80 <shift_led>
  d2:	eb cf       	rjmp	.-42     	; 0xaa <main+0x10>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
