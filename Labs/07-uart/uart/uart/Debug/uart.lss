
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  000005d0  00000664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  008001b2  008001b2  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a6  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aea  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae8  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c7  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  00003d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_18>
  4c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3b       	cpi	r26, 0xB2	; 178
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 eb       	ldi	r26, 0xB2	; 178
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3f       	cpi	r26, 0xF8	; 248
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_gotoxy>:
 118:	61 11       	cpse	r22, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_gotoxy+0xc>
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 122:	08 95       	ret
 124:	80 54       	subi	r24, 0x40	; 64
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_clrscr>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_putc>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_puts>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <lcd_puts+0x1a>
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <lcd_puts+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 160:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 162:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 164:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 166:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 168:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 16a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 16c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x1c>
 178:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 17a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 17c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x30>
 18c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x38>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	85 e1       	ldi	r24, 0x15	; 21
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x44>
 1a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ac:	95 e1       	ldi	r25, 0x15	; 21
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x52>
 1b2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <compute_parity>:
#include "lcd.h"            // Peter Fleury's LCD library
#include <stdlib.h>         // C library. Needed for conversion function
#include "uart.h"           // Peter Fleury's UART library
#define F_CPU	16000000
/* Function definitions ----------------------------------------------*/
uint8_t compute_parity(uint16_t value){
 1d4:	9c 01       	movw	r18, r24
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
	uint8_t cnt=0;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t parity=0;//Parity bit for odd parity
	for(uint8_t i=0;i<15;i++){
		if((value % 2)==1){
 1da:	20 fd       	sbrc	r18, 0
			cnt++;
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
		}
		value=value>>1;
 1de:	36 95       	lsr	r19
 1e0:	27 95       	ror	r18
 1e2:	91 50       	subi	r25, 0x01	; 1
#define F_CPU	16000000
/* Function definitions ----------------------------------------------*/
uint8_t compute_parity(uint16_t value){
	uint8_t cnt=0;
	uint8_t parity=0;//Parity bit for odd parity
	for(uint8_t i=0;i<15;i++){
 1e4:	d1 f7       	brne	.-12     	; 0x1da <compute_parity+0x6>
		parity=0;
	}
	else{
		parity=1;
	}
	return parity;
 1e6:	80 95       	com	r24
}
 1e8:	81 70       	andi	r24, 0x01	; 1
 1ea:	08 95       	ret

000001ec <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(1, 1); lcd_puts("Parity bit: ");
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 21a:	84 e1       	ldi	r24, 0x14	; 20
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 22a:	86 e1       	ldi	r24, 0x16	; 22
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	
	ADMUX|=(1<<REFS0);
 232:	ec e7       	ldi	r30, 0x7C	; 124
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	80 83       	st	Z, r24

    // Set input channel to ADC0
	
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 23c:	80 81       	ld	r24, Z
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	80 83       	st	Z, r24

    // Enable ADC module
	
	ADCSRA|=(1<<ADEN);
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
	
	ADCSRA|=(1<<ADIE);
 24c:	80 81       	ld	r24, Z
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	80 83       	st	Z, r24

    // Set clock prescaler to 128
	
	ADCSRA|=((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
 252:	80 81       	ld	r24, Z
 254:	87 60       	ori	r24, 0x07	; 7
 256:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
	
	TIM1_overflow_interrupt_enable();
 258:	ef e6       	ldi	r30, 0x6F	; 111
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	
    // Enable interrupt and set the overflow prescaler to 262 ms
	
	TIM1_overflow_262ms();
 262:	e1 e8       	ldi	r30, 0x81	; 129
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	80 83       	st	Z, r24
 26c:	80 81       	ld	r24, Z
 26e:	83 60       	ori	r24, 0x03	; 3
 270:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	
	uart_init(UART_BAUD_SELECT(9600,F_CPU))	;
 272:	87 e6       	ldi	r24, 0x67	; 103
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 27a:	78 94       	sei
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0x90>

0000027e <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
    static uint8_t cnt=0;
	if(cnt>=3){
 28e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	40 f0       	brcs	.+16     	; 0x2a6 <__vector_13+0x28>
		cnt=0;
 296:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <__data_end>
		ADCSRA|=(1<<ADSC);
 29a:	ea e7       	ldi	r30, 0x7A	; 122
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	80 83       	st	Z, r24
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <__vector_13+0x2e>
	}
	else{
		cnt++;
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <__data_end>
	}

}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <__vector_21+0x2c>
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <__vector_21+0x2e>
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 2ee:	80 e3       	ldi	r24, 0x30	; 48
 2f0:	90 e3       	ldi	r25, 0x30	; 48
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	9c 83       	std	Y+4, r25	; 0x04
 2f8:	8b 83       	std	Y+3, r24	; 0x03

    value = ADC;    // Copy ADC result to 16-bit variable
 2fa:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2fe:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 302:	4a e0       	ldi	r20, 0x0A	; 10
 304:	be 01       	movw	r22, r28
 306:	6f 5f       	subi	r22, 0xFF	; 255
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	c8 01       	movw	r24, r16
 30c:	0e 94 b1 02 	call	0x562	; 0x562 <__itoa_ncheck>
    itoa(value, lcd_string, 10);    // Convert decimal value to string
	lcd_gotoxy(8,0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 318:	88 e1       	ldi	r24, 0x18	; 24
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(8,0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	88 e0       	ldi	r24, 0x08	; 8
 324:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 330:	40 e1       	ldi	r20, 0x10	; 16
 332:	be 01       	movw	r22, r28
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 b1 02 	call	0x562	; 0x562 <__itoa_ncheck>
	
	itoa(value, lcd_string, 16);    // Convert decimal value to string
	lcd_gotoxy(13,0);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 346:	88 e1       	ldi	r24, 0x18	; 24
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(13,0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	uint8_t parity_bit=compute_parity(value); //odd parity bit for value from ADC
 35e:	c8 01       	movw	r24, r16
 360:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <compute_parity>
 364:	4a e0       	ldi	r20, 0x0A	; 10
 366:	be 01       	movw	r22, r28
 368:	6f 5f       	subi	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 b1 02 	call	0x562	; 0x562 <__itoa_ncheck>
	itoa(parity_bit, lcd_string, 10);    // Convert decimal value to string
	lcd_gotoxy(13,1);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	8d e0       	ldi	r24, 0x0D	; 13
 376:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 37a:	88 e1       	ldi	r24, 0x18	; 24
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(13,1);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 38a:	ce 01       	movw	r24, r28
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	if(value<50){
 392:	02 33       	cpi	r16, 0x32	; 50
 394:	11 05       	cpc	r17, r1
 396:	28 f4       	brcc	.+10     	; 0x3a2 <__vector_21+0xe6>
		uart_puts("Right button was pressed");
 398:	8d e1       	ldi	r24, 0x1D	; 29
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 a2 02 	call	0x544	; 0x544 <uart_puts>
 3a0:	2e c0       	rjmp	.+92     	; 0x3fe <__vector_21+0x142>
	}
	else if((value>50)&&(value<150)){
 3a2:	c8 01       	movw	r24, r16
 3a4:	c3 97       	sbiw	r24, 0x33	; 51
 3a6:	83 36       	cpi	r24, 0x63	; 99
 3a8:	91 05       	cpc	r25, r1
 3aa:	28 f4       	brcc	.+10     	; 0x3b6 <__vector_21+0xfa>
		uart_puts("Up button was pressed");
 3ac:	86 e3       	ldi	r24, 0x36	; 54
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 a2 02 	call	0x544	; 0x544 <uart_puts>
 3b4:	24 c0       	rjmp	.+72     	; 0x3fe <__vector_21+0x142>
	}
	else if((value>200)&&(value<300)){
 3b6:	c8 01       	movw	r24, r16
 3b8:	89 5c       	subi	r24, 0xC9	; 201
 3ba:	91 09       	sbc	r25, r1
 3bc:	83 36       	cpi	r24, 0x63	; 99
 3be:	91 05       	cpc	r25, r1
 3c0:	28 f4       	brcc	.+10     	; 0x3cc <__vector_21+0x110>
		uart_puts("Down button was pressed");
 3c2:	8c e4       	ldi	r24, 0x4C	; 76
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 a2 02 	call	0x544	; 0x544 <uart_puts>
 3ca:	19 c0       	rjmp	.+50     	; 0x3fe <__vector_21+0x142>
	}
	else if((value>200)&&(value<300)){
		uart_puts("Down button was pressed");
	}
	else if((value>350)&&(value<450)){
 3cc:	c8 01       	movw	r24, r16
 3ce:	8f 55       	subi	r24, 0x5F	; 95
 3d0:	91 40       	sbci	r25, 0x01	; 1
 3d2:	83 36       	cpi	r24, 0x63	; 99
 3d4:	91 05       	cpc	r25, r1
 3d6:	28 f4       	brcc	.+10     	; 0x3e2 <__vector_21+0x126>
		uart_puts("Left button was pressed");
 3d8:	84 e6       	ldi	r24, 0x64	; 100
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 a2 02 	call	0x544	; 0x544 <uart_puts>
 3e0:	0e c0       	rjmp	.+28     	; 0x3fe <__vector_21+0x142>
	}
	else if((value>600)&&(value<700)){
 3e2:	09 55       	subi	r16, 0x59	; 89
 3e4:	12 40       	sbci	r17, 0x02	; 2
 3e6:	03 36       	cpi	r16, 0x63	; 99
 3e8:	11 05       	cpc	r17, r1
 3ea:	28 f4       	brcc	.+10     	; 0x3f6 <__vector_21+0x13a>
		uart_puts("Select button was pressed");
 3ec:	8c e7       	ldi	r24, 0x7C	; 124
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	0e 94 a2 02 	call	0x544	; 0x544 <uart_puts>
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <__vector_21+0x142>
	}
	else{
		uart_puts("None button was pressed");
 3f6:	86 e9       	ldi	r24, 0x96	; 150
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 a2 02 	call	0x544	; 0x544 <uart_puts>
	}
	
	uart_puts("\r\n");
 3fe:	8e ea       	ldi	r24, 0xAE	; 174
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 a2 02 	call	0x544	; 0x544 <uart_puts>
	
}
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	2f 93       	push	r18
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
 44c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 450:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 454:	8c 71       	andi	r24, 0x1C	; 28
 456:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <UART_RxHead>
 45a:	ef 5f       	subi	r30, 0xFF	; 255
 45c:	ef 71       	andi	r30, 0x1F	; 31
 45e:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <UART_RxTail>
 462:	e9 17       	cp	r30, r25
 464:	39 f0       	breq	.+14     	; 0x474 <__vector_18+0x3c>
 466:	e0 93 b5 01 	sts	0x01B5, r30	; 0x8001b5 <UART_RxHead>
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	e8 54       	subi	r30, 0x48	; 72
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	20 83       	st	Z, r18
 472:	01 c0       	rjmp	.+2      	; 0x476 <__vector_18+0x3e>
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <UART_LastRxError>
 47a:	89 2b       	or	r24, r25
 47c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <UART_LastRxError>
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__vector_19>:
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	8f 93       	push	r24
 4a0:	9f 93       	push	r25
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
 4a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <UART_TxHead>
 4aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <UART_TxTail>
 4ae:	98 17       	cp	r25, r24
 4b0:	69 f0       	breq	.+26     	; 0x4cc <__vector_19+0x38>
 4b2:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <UART_TxTail>
 4b6:	ef 5f       	subi	r30, 0xFF	; 255
 4b8:	ef 71       	andi	r30, 0x1F	; 31
 4ba:	e0 93 b6 01 	sts	0x01B6, r30	; 0x8001b6 <UART_TxTail>
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	e8 52       	subi	r30, 0x28	; 40
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	80 81       	ld	r24, Z
 4c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__vector_19+0x42>
 4cc:	e1 ec       	ldi	r30, 0xC1	; 193
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	8f 7d       	andi	r24, 0xDF	; 223
 4d4:	80 83       	st	Z, r24
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <uart_init>:
 4e8:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <UART_TxHead>
 4ec:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <UART_TxTail>
 4f0:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <UART_RxHead>
 4f4:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <UART_RxTail>
 4f8:	99 23       	and	r25, r25
 4fa:	1c f4       	brge	.+6      	; 0x502 <uart_init+0x1a>
 4fc:	22 e0       	ldi	r18, 0x02	; 2
 4fe:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 502:	90 78       	andi	r25, 0x80	; 128
 504:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 508:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 50c:	88 e9       	ldi	r24, 0x98	; 152
 50e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 512:	86 e0       	ldi	r24, 0x06	; 6
 514:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 518:	08 95       	ret

0000051a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 51a:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <UART_TxHead>
 51e:	2f 5f       	subi	r18, 0xFF	; 255
 520:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 522:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <UART_TxTail>
 526:	29 17       	cp	r18, r25
 528:	e1 f3       	breq	.-8      	; 0x522 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 52a:	e2 2f       	mov	r30, r18
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	e8 52       	subi	r30, 0x28	; 40
 530:	fe 4f       	sbci	r31, 0xFE	; 254
 532:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 534:	20 93 b7 01 	sts	0x01B7, r18	; 0x8001b7 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 538:	e1 ec       	ldi	r30, 0xC1	; 193
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	80 62       	ori	r24, 0x20	; 32
 540:	80 83       	st	Z, r24
 542:	08 95       	ret

00000544 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	ec 01       	movw	r28, r24
    while (*s)
 54a:	88 81       	ld	r24, Y
 54c:	88 23       	and	r24, r24
 54e:	31 f0       	breq	.+12     	; 0x55c <uart_puts+0x18>
 550:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 552:	0e 94 8d 02 	call	0x51a	; 0x51a <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 556:	89 91       	ld	r24, Y+
 558:	81 11       	cpse	r24, r1
 55a:	fb cf       	rjmp	.-10     	; 0x552 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <__itoa_ncheck>:
 562:	bb 27       	eor	r27, r27
 564:	4a 30       	cpi	r20, 0x0A	; 10
 566:	31 f4       	brne	.+12     	; 0x574 <__itoa_ncheck+0x12>
 568:	99 23       	and	r25, r25
 56a:	22 f4       	brpl	.+8      	; 0x574 <__itoa_ncheck+0x12>
 56c:	bd e2       	ldi	r27, 0x2D	; 45
 56e:	90 95       	com	r25
 570:	81 95       	neg	r24
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__utoa_common>

00000578 <__utoa_ncheck>:
 578:	bb 27       	eor	r27, r27

0000057a <__utoa_common>:
 57a:	fb 01       	movw	r30, r22
 57c:	55 27       	eor	r21, r21
 57e:	aa 27       	eor	r26, r26
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	aa 1f       	adc	r26, r26
 586:	a4 17       	cp	r26, r20
 588:	10 f0       	brcs	.+4      	; 0x58e <__utoa_common+0x14>
 58a:	a4 1b       	sub	r26, r20
 58c:	83 95       	inc	r24
 58e:	50 51       	subi	r21, 0x10	; 16
 590:	b9 f7       	brne	.-18     	; 0x580 <__utoa_common+0x6>
 592:	a0 5d       	subi	r26, 0xD0	; 208
 594:	aa 33       	cpi	r26, 0x3A	; 58
 596:	08 f0       	brcs	.+2      	; 0x59a <__utoa_common+0x20>
 598:	a9 5d       	subi	r26, 0xD9	; 217
 59a:	a1 93       	st	Z+, r26
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	79 f7       	brne	.-34     	; 0x57e <__utoa_common+0x4>
 5a0:	b1 11       	cpse	r27, r1
 5a2:	b1 93       	st	Z+, r27
 5a4:	11 92       	st	Z+, r1
 5a6:	cb 01       	movw	r24, r22
 5a8:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <strrev>

000005ac <strrev>:
 5ac:	dc 01       	movw	r26, r24
 5ae:	fc 01       	movw	r30, r24
 5b0:	67 2f       	mov	r22, r23
 5b2:	71 91       	ld	r23, Z+
 5b4:	77 23       	and	r23, r23
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <strrev+0x4>
 5b8:	32 97       	sbiw	r30, 0x02	; 2
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <strrev+0x18>
 5bc:	7c 91       	ld	r23, X
 5be:	6d 93       	st	X+, r22
 5c0:	70 83       	st	Z, r23
 5c2:	62 91       	ld	r22, -Z
 5c4:	ae 17       	cp	r26, r30
 5c6:	bf 07       	cpc	r27, r31
 5c8:	c8 f3       	brcs	.-14     	; 0x5bc <strrev+0x10>
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
